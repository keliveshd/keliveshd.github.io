<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Apple Developer公司账户注册步骤]]></title>
      <url>http://yoursite.com/blog/2016/05/Apple-Developer%E5%85%AC%E5%8F%B8%E8%B4%A6%E6%88%B7%E6%B3%A8%E5%86%8C%E6%AD%A5%E9%AA%A4.html</url>
      <content type="html"><![CDATA[<h2 id="1-注册"><a href="#1-注册" class="headerlink" title="1.注册"></a>1.注册</h2><h3 id="1-1-注册apple-id"><a href="#1-1-注册apple-id" class="headerlink" title="1.1 注册apple id"></a>1.1 注册apple id</h3><p>访问 <a href="https://appleid.apple.com/cn/#!&amp;page=create" target="_blank" rel="external">苹果AppleId注册地址</a> 按照提示步骤注册。<a href="https://developer.apple.com/support/enrollment/cn/" target="_blank" rel="external">详细注册规则</a><br>所需资料:</p>
<ul>
<li>注册邮箱</li>
<li>密码</li>
<li>姓氏、名字</li>
<li>安全提示问题<img src="http://ww1.sinaimg.cn/large/72f96cbagw1f4d7lmpfk4j20rg09u766" alt="2016-05-30_10:37:00.jpg"><h3 id="1-2-开通Organization开发者账号"><a href="#1-2-开通Organization开发者账号" class="headerlink" title="1.2 开通Organization开发者账号"></a>1.2 开通Organization开发者账号</h3>1.访问 <a href="https://developer.apple.com/enroll/" target="_blank" rel="external">Apple Developer Program Enrollment页面</a><br>2.登录 1.1 中注册的Apple Id ，在页面中 Entity Type 选项选择 I develop apps as <strong>Company/Organization</strong> 点击 <em>Continue</em><br><img src="http://ww3.sinaimg.cn/large/72f96cbagw1f4d7qd0rwxj21c60pan50" alt="2016-05-30_10:41:37.jpg"><br>3.根据提示选择公司类型<br><img src="http://ww3.sinaimg.cn/large/72f96cbagw1f4d7t2ddrfj20q40cwdhf" alt="2016-05-30_10:43:51.jpg"><br>4.输入公司资料</li>
<li><strong>法律实体名称:</strong>:Legal Entity Name(Include the entity type, such as Inc., LLC, GmbH, etc.)包括实体类型，例如公司，LLC GmbH的等<code>要注册 Apple Developer Program，您的所在组织必须为法人实体，这样才能和 Apple 签订合同。我们不接受 DBA、虚构公司、商号或子公司。法人实体名称将显示为您在 App Store 和 Mac App Store 上分发的 app 的“销售方”。示例：销售方：ABC Company, Inc.</code></li>
<li><strong>邓白氏编码:</strong> D-U-N-S® Number <a href="https://developer.apple.com/support/D-U-N-S/cn/" target="_blank" rel="external">申请方式</a><br><code>您所在的组织必须拥有 D-U-N-S Number，以便我们验证您所在组织的身份和法人实体状态。这些唯一的九位编码由 Dun &amp; Bradstreet 进行分配，广泛用作标准的企业识别码。</code><ul>
<li>法人实体名称</li>
<li>总部地址</li>
<li>邮寄地址</li>
<li>您的工作联系信息</li>
</ul>
</li>
<li><strong>网站</strong>Website</li>
</ul>
<p>##2.开通Apple Developer Program</p>
<p>###2.1 定价</p>
<p><strong>Apple Developer Program</strong>。如果您是个人或代表独资/个人企业并有意创建 app 在适用于 iPhone、iPad、Mac 和 Apple Watch 的 App Store 上分发，请注册 Apple Developer Program。会员资格包括以下内容的使用权限：测试版 OS、高级 app 功能，以及用于开发、测试和分发 app 和 Safari Extensions 的工具。作为个人注册的开发者将使用个人姓名在 App Store 上销售 app。</p>
<p>会员资格每年 99 美元</p>
<hr>
<p><strong>Apple Developer Enterprise Program</strong>。如果您的组织想要创建专门设计的 app 并只将其分发给您组织的员工，请注册 Apple Developer Enterprise Program。会员资格包括您的整个开发团队对以下内容的使用权限：测试版 OS、高级 app 功能以及开发、测试和分发 app 所需的工具。在注册过程中，公司和教育机构必须提供注册其法定实体时的 D-U-N-S 编号（可免费获取）。</p>
<p>会员资格每年 299 美元</p>
<p>###2.2 付款</p>
<p>结账时，您可以使用您所在国家/地区的 Apple Store 在线商店提供的任何付款方式。如果您要通过信用卡付款，并以个人身份注册，则必须使用您自己的信用卡来完成购买。如果未使用自己的信用卡，您的注册会被延迟，且您将被要求提供由政府颁发且带有相片的身份证件副本。完成购买后，您将收到来自 Apple Store 在线商店的购买确认，以及来自 Apple Developer Program Support 的会员资格确认。</p>
<p>如果您所在国家/地区的 Apple Store 在线商店上没有可用的 Apple Developer 产品，您便会看到一张信用卡表单。请使用能以美元支付的信用卡进行购买。当您完成购买提交后，您会收到处理确认的电子邮件。当您的购买处理完成后，您会收到购买确认，以及含有会员资格激活说明的电子邮件。</p>
<p>成为会员后，您便可以通过登录 <a href="/account/">Member Center</a> 来访问自己的开发者帐户。您还可以登录 iTunes Connect 以设置帐户，用于在适用于 iPhone、iPad、Mac 和 Apple Watch 的 App Store 上分发 app。请阅读 <a href="/support/itunes-connect/cn/">iTunes Connect 支持页面</a>来详细了解 iTunes Connect。</p>
<p>###2.3 发票</p>
<p>您可以通过在 Apple Store 在线商店中查看您的帐户来访问所购买产品的发票。如果您在中国的 Apple Store 在线商店中购买了产品，并希望请求增值税发票，请致电 400-666-8800 与 Apple Store 在线商店支持专家进行交谈。</p>
<p>###2.4 续订</p>
<h4 id="续订组织的会员资格"><a href="#续订组织的会员资格" class="headerlink" title="续订组织的会员资格"></a>续订组织的会员资格</h4><p>如果您在 Apple Developer Program 中注册为开发组织，需要由团队代理（iTunes Connect 中分配了“法律”角色的人员）代表您所在的组织完成成员资格的续订。他们还可以管理会员资格的自动续订*。团队代理的联系信息可以在 Member Center 的“<a href="/account/?view=membership">您的帐户</a>”(Your Account) 部分中找到。有关角色的更多信息，请参阅“<a href="/support/roles/cn/">计划角色和 iTunes Connect 角色</a>”。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Injection for Xcode：成吨的提高开发效率]]></title>
      <url>http://yoursite.com/blog/2016/05/Injection-for-Xcode%EF%BC%9A%E6%88%90%E5%90%A8%E7%9A%84%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87.html</url>
      <content type="html"><![CDATA[<p><strong>转载</strong>:<a href="">http://www.jianshu.com/p/27be46d5e5d4</a><br><strong>作者</strong>:没故事的卓同学<br>今天强烈推荐一个Xcode高端必备插件：<a href="https://github.com/johnno1962/injectionforxcode" target="_blank" rel="external"> Injection Plugin for Xcode</a><br>直接放demo演示动图：  </p>
<p><img src="http://7xti6m.com1.z0.glb.clouddn.com/2016-05-26-225849-2774ad82cd157ca0.gif" alt="225849-2774ad82cd157ca0">  </p>
<p> Injection Plugin for Xcode</p>
<p>我很久以前就希望有这么一种功能，直接修改某行代码，F5一下就能刷新这个实例，而不用重写build整个项目。靠夭，我不是在说前端！<br>没想居然有一天，梦想照入现实！！！是的，就是它，不用重新启动应用就可以让修改的代码生效。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>超级简单：修改源码，按下刷新的快捷键<code>ctrl</code>+<code>=</code>。会有一个快速的进度条闪过，修改的代码就<strong>生效了。</strong></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li>可以使用Alcatraz安装</li>
<li>或者clone这个项目，运行InjectionPluginLite/InjectionPlugin.xcodeproj。</li>
</ul>
<h1 id="检验安装成功"><a href="#检验安装成功" class="headerlink" title="检验安装成功"></a>检验安装成功</h1><p>在某个类里添加下面的方法：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">void</span>)injected&#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"I've been injected: %@"</span>, <span class="keyword">self</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者swift下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">injected</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"I've been injected: (self)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打一个断点在这行代码上，按下快捷键ctrl+=后，代码执行到这个类时，如果断点进入这个方法说明你已经安装成功了。</p>
<h1 id="支持Swift"><a href="#支持Swift" class="headerlink" title="支持Swift"></a>支持Swift</h1><p>Swift中的大部分类都可以正常使用。不过以下一些情况使用会有问题：</p>
<ul>
<li>结构中的修改</li>
<li>标记为final的func和class</li>
<li>不在类里的全局函数和变量</li>
</ul>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>Injection是一个Xcode的扩展插件，可以让你修改一个类的代码实现而不用重启整个应用。</p>
<p>它通过解析应用的build日志来判断源代码文件上次是怎么被编译的。然后会把这些重新编译一遍包在一个已经通过动态加载器（dynamic loader）注入到应用的bundle里。这个时候其实有两个版本的类在app里，一个原始的和一个修改过的版本。修改过的版本通过和原始类”swizzled”来产生效果。</p>
<p>swizzling利用了OC的runtime。这个也可以在Swift中没有标记为final或者private的方法（可以被override的方法）。对结构体无效。</p>
<h1 id="这个插件还可以做点什么"><a href="#这个插件还可以做点什么" class="headerlink" title="这个插件还可以做点什么"></a>这个插件还可以做点什么</h1><ul>
<li>按照这个文档操作，还可以支持Storyboard <a href="https://github.com/johnno1962/injectionforxcode/blob/master/documentation/storyboards.md" target="_blank" rel="external">Storyboard-based iOS projects</a>.</li>
<li>也可以可视化的调整颜色 <a href="https://github.com/johnno1962/injectionforxcode/blob/master/documentation/tunable_parameters.md" target="_blank" rel="external">collection of tunable parameters</a></li>
<li>当你开始注入时，会在同一个目录下生成一个项目文件：iOSInjectionProject 或者 OSXInjectionProject。这个项目用于注入你的修改到原项目。<strong>建议加入<code>.gitignore</code>。</strong></li>
<li>ctrl+=的快捷键可以在 “Tunable App Parameters”面板里自定义</li>
<li>如果想在一台设备上使用，参考这个文档<a href="https://github.com/johnno1962/injectionforxcode/blob/master/documentation/patching_injection.md" target="_blank" rel="external">patch to your project.</a>.</li>
</ul>
<h1 id="我安装时遇到的一个错误"><a href="#我安装时遇到的一个错误" class="headerlink" title="我安装时遇到的一个错误"></a>我安装时遇到的一个错误</h1><p>第一次使用，提示我项目里使用的一个第三方framework找不到。这个时候打开它自动生成的iOSInjectionProject，编译一下可以看到错误的具体原因。我看到issue里也好多人遇到。解决方式就是将自己项目framework search paths中的这个第三方框架的路径拷贝到iOSInjectionProject里。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Reveal调试工具加载方法]]></title>
      <url>http://yoursite.com/blog/2016/05/Reveal%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E5%8A%A0%E8%BD%BD%E6%96%B9%E6%B3%95.html</url>
      <content type="html"><![CDATA[<p><strong>Integrating Reveal without modifying your Xcode project</strong></p>
<p><em>reveal: 檢視 iOS app 的 view 結構。</em><br>给出了如何不用修改Xcode工程就可以加载使用Reveal的方法。<br>在当前用户目录新建一个文件.lldbinit，位于~/.lldbinit，LLDB每次启动的时候都会加载这个文件。<br><strong>在.lldbinit中输入如下内容：</strong> </p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">command alias reveal_load_sim expr (Class)<span class="built_in">NSClassFromString</span>(<span class="string">@"IBARevealLoader"</span>) == <span class="literal">nil</span> ? (<span class="keyword">void</span> *)dlopen(<span class="string">"/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib"</span>, <span class="number">0x2</span>) : ((<span class="keyword">void</span>*)<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">command alias reveal_load_dev expr (Class)<span class="built_in">NSClassFromString</span>(<span class="string">@"IBARevealLoader"</span>) == <span class="literal">nil</span> ? (<span class="keyword">void</span>*)dlopen((<span class="keyword">char</span>*)[(<span class="built_in">NSString</span>*)[(<span class="built_in">NSBundle</span>*)[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"libReveal"</span> ofType:<span class="string">@"dylib"</span>] cStringUsingEncoding:<span class="number">0x4</span>], <span class="number">0x2</span>) : ((<span class="keyword">void</span>*)<span class="number">0</span>) </span><br><span class="line"></span><br><span class="line">command alias reveal_start expr (<span class="keyword">void</span>)[(<span class="built_in">NSNotificationCenter</span>*)[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class="string">@"IBARevealRequestStart"</span> object:<span class="literal">nil</span>]; </span><br><span class="line"></span><br><span class="line">command alias reveal_stop expr (<span class="keyword">void</span>)[(<span class="built_in">NSNotificationCenter</span>*)[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class="string">@"IBARevealRequestStop"</span> object:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>
<p>上述文件创建了4个命令： </p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reveal_load_sim,reveal_load_dev, </span><span class="keyword">reveal_start </span>和 <span class="keyword">reveal_stop</span></span><br></pre></td></tr></table></figure>
<p>####手动加载调试库<br>在设备起来之后，你就可以断下应用，在LLDB提示框中输入上述的命令了。<br><img src="http://7xti6m.com1.z0.glb.clouddn.com/201601/1464188644996.png" alt=""><br>请注意：只有在iOS应用发出了UIApplicationDidFinishLaunchingNotification通知之后，比如应用的delegate已经处理过application::didFinishLaunchingWithOptions:之后才能调用上面的reveal<em>load</em>*命令，然后再调用reveal_start</p>
<p><code>reveal_load_sim</code> 这个只在iOS模拟器上有效。它从Reveal的应用程序bundle中找到并加载<code>libReveal.dylib</code>（请确保你把Reveal安装到了系统的 <em>Application</em> 文件夹，如果你换地方了，你修改上述的文件）。</p>
<p><code>reveal_load_dev</code> 这个命令在iOS设备和模拟器上都有效。不过，它需要你在Build Phase中的的Copy Bundle Resources中加上libReveal.dylib，请确保没有放到<code>Link Binary With Libraries</code>这个地方。</p>
<p><code>reveal_start</code> 这个命令发出一个通知启动Reveal Server。</p>
<p><code>reveal_stop</code> 这个命令发出一个通知停止Reveal Server。<br>请注意：只有在iOS应用发出了<code>UIApplicationDidFinishLaunchingNotification</code>通知之后，比如应用的delegate已经处理过<code>application::didFinishLaunchingWithOptions:</code>之后才能调用上面的<code>reveal_load_*</code>命令，然后再调用<code>reveal_start</code><br>在设备起来之后，你就可以断下应用，在LLDB提示框中输入上述的命令了。 </p>
<p>上述的过程还需要手动输入，下面介绍如何设置条件断点，使得Reveal在启动之后自动加载。<br>在你的应用的<code>application:didFinishLaunchingWithOptions</code>中的代码出加一个断点，然后右键，选择编辑断点。<br>输入如下图一样的命令： </p>
<p>重新运行下应用，如果控制台输出了如下信息： </p>
<p><code>Reveal server started.</code></p>
<p>说明Reveal已经自动成功加载。<br><strong>真机补充:</strong><br>真机调试下需要额外增加如下配置 </p>
<p>要用Reveal连接真机调试，我们需要先把Reveal的动态链接库上传到真机上。由于iOS设备有沙盒存在，所以我们只能将Reveal的动态链接库添加到工程中。</p>
<p>点击Reveal菜单栏的”Help”-&gt;”Show Reveal Library in Finder”选项（如下图所示），可以在Finder中显示出Reveal的动态链接库：libReveal.dylib<br><img src="http://7xti6m.com1.z0.glb.clouddn.com/201601/1464188790348.png" alt=""><br>在 Copy Bundle Resources 配置区域中 ，加入<code>libReveal.dylib</code>。<br><img src="http://7xti6m.com1.z0.glb.clouddn.com/201601/1464188811160.png" alt=""></p>
<p>在Link Binary With Libraries配置项中：<br>如果已有libReveal.dylib，请将其移除——不应在编译时连接dylib文件。<br>如果下列系统框架与库文件还不存在，请将他们加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CFNetwork.framework</span><br><span class="line">QuartzCore.framework</span><br><span class="line">CoreGraphics.framework</span><br></pre></td></tr></table></figure></p>
<ul>
<li>Xcode一般默认会在工程中包含此框架文件。</li>
</ul>
<p>2.进入target的Build Phases标签页，选择Editor → Add Build Phase → Add Run Script菜单。在Run Script阶段中加入以下内容:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="_">-e</span> <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$&#123;CODE_SIGN_IDENTITY&#125;</span>"</span> ]; <span class="keyword">then</span> codesign -fs <span class="string">"<span class="variable">$&#123;CODE_SIGN_IDENTITY&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;BUILT_PRODUCTS_DIR&#125;</span>/<span class="variable">$&#123;FULL_PRODUCT_NAME&#125;</span>/libReveal.dylib"</span> <span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p>
<p>之后用Reveal连接真机的方式和连接模拟器的方式类似，我们只需要把上一节提到的断点Action的内容从<code>reveal_load_sim</code>改成<code>reveal_load_dev</code>即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS 高效添加圆角效果]]></title>
      <url>http://yoursite.com/blog/2016/05/iOS-%E9%AB%98%E6%95%88%E6%B7%BB%E5%8A%A0%E5%9C%86%E8%A7%92%E6%95%88%E6%9E%9C.html</url>
      <content type="html"><![CDATA[<p><strong>转载</strong>:<a href="">http://www.jianshu.com/p/f970872fdc22</a><br><strong>作者</strong>:bestswifter</p>
<p>圆角（RounderCorner）是一种很常见的视图效果，相比于直角，它更加柔和优美，易于接受。但很多人并不清楚如何设置圆角的正确方式和原理。设置圆角会带来一定的性能损耗，如何提高性能是另一个需要重点讨论的话题。我查阅了一些现有的资料，收获良多的同时也发现了一些误导人错误。本文总结整理了一些知识点，概括如下：</p>
<ul>
<li>设置圆角的正确姿势及其原理</li>
<li>设置圆角的性能损耗</li>
<li>其他设置圆角的方法，以及最优选择</li>
</ul>
<p>我为本文制作了一个 demo，读者可以在我的 github 上 clone 下来：<a href="https://github.com/bestswifter/MySampleCode/tree/master/CornerRadius" target="_blank" rel="external">CornerRadius</a>，如果觉得有帮助还望给个star以示支持。项目由 Swift 实现，但请务必相信我即使你只会 Objective-C，也可以看懂它。因为其中的关键知识与 Swift 无关。</p>
<h1 id="正确姿势"><a href="#正确姿势" class="headerlink" title="正确姿势"></a>正确姿势</h1><p>首先，我想要声明的一点是：</p>
<blockquote>
<p><strong>设置圆角很简单，它不会带来任何性能损耗</strong></p>
</blockquote>
<p>因为这件事本来就很简单，它只需要一行代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.layer.cornerRadius = <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>先别急着关掉网页，也别急着回复，我们让事实说话。打开 Instuments，选择 <strong>Core Animation</strong> 调试，你会发现既没有 Off-Screen Render，也没有降低帧数。关于使用 Instuments 分析应用，你可以参考我的这篇文章：<a href="http://www.jianshu.com/p/619cf14640f3" target="_blank" rel="external">UIKit性能调优实战讲解</a>。从截图中可以看到第三个棕色视图<strong>确确实实</strong>设置了圆角：</p>
<p><img src="http://7xti6m.com1.z0.glb.clouddn.com/201601/1464187495365.png" alt="">  </p>
<p>圆角效果</p>
<p>不过查看一下代码可以发现，有一个 <code>UILabel</code> 也设置了圆角，但是没有表现出任何变化。关于这一点，你可以查看 <code>cornerRadius</code> 属性的注释：</p>
<blockquote>
<p>By default, the corner radius does not apply to the image in the layer’s contents property; it applies only to the background color and border of the layer. However, setting the masksToBounds property to true causes the content to be clipped to the rounded corners.</p>
</blockquote>
<p>也就是说在默认情况下，这个属性只会影响视图的背景颜色和 border。对于 <code>UILabel</code> 这样内部还有子视图的控件就无能为力了。所以很多情况下我们会看到这样的代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">label.layer.cornerRadius = <span class="number">5</span></span><br><span class="line">label.layer.masksToBounds = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>我们把第二行代码添加到 <code>CustomTableViewCell</code> 的构造方法中，再次运行 Instument，就可以看到圆角效果了。</p>
<h1 id="性能损耗"><a href="#性能损耗" class="headerlink" title="性能损耗"></a>性能损耗</h1><p>如果你勾选上 <strong>Color Offscreen-Rendered Yellow</strong>，就会发现 label 的四周出现了黄色的标记，说明这里出现了离屏渲染。关于离屏渲染的介绍，同样可以参考：<a href="http://www.jianshu.com/p/619cf14640f3" target="_blank" rel="external">UIKit性能调优实战讲解</a>，就不在本文赘述了。</p>
<p>需要强调的一点是，<strong>离屏渲染并非由设置圆角导致的！</strong>通过控制变量的方法很容易得出这个结论，因为 UIView 只是设置了 <code>cornerRadius</code>，但它没有出现离屏渲染。某些比较权威的文章，比如 <a href="http://stackoverflow.com/questions/13158796/what-triggers-offscreen-rendering-blending-and-layoutsubviews-in-ios" target="_blank" rel="external">Stackoverflow</a> 和 <a href="http://www.reviewcode.cn/article.html?reviewId=7" target="_blank" rel="external">CodeReview</a> 都提到设置 <code>cornerRadius</code> 会导致离屏渲染从而影响性能，我想这实在是冤枉了可爱的 <code>cornerRadius</code> 变量，也误导了别人。</p>
<p>虽然设置 <code>masksToBounds</code> 会导致离屏渲染，从而影响性能，但是这个影响到底会有多大？在我的 iPhone6 上，即使出现了 17 个带有圆角的视图，滑动时的帧数依然在 58 - 59 fps 左右波动。</p>
<p>然而，这并非说明 iOS 9 做了什么特殊优化，或者是离屏渲染的影响不大，其主要原因在于<strong>圆角不够多</strong>。当我将一个 <code>UIImageView</code> 也设置成圆角，也就是屏幕上的圆角视图达到 34 个时，fps 大幅度下降，大约只有 33 左右。基本上已经达到了影响用户体验的范围。因此，一切不讲依据的优化都是耍流氓，如果你的圆角视图不多，cell 不复杂，就不要费力气折腾了。</p>
<h1 id="高效地设置圆角"><a href="#高效地设置圆角" class="headerlink" title="高效地设置圆角"></a>高效地设置圆角</h1><p>假设现在圆角视图非常多（比如在 UICollectionView 中），那么如何为视图高效的添加圆角呢？网上的教程大多没有说全，因为这个事要分两种情况考虑。为普通的 <code>UIView</code> 设置圆角，和为 <code>UIImageView</code> 设置圆角的原理截然不同。</p>
<p>有一种做法是这样的，这种写法试图实现 <code>cornerRadius = 3</code> 的效果：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">drawRect</span><span class="params">(rect: CGRect)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> maskPath = <span class="type">UIBezierPath</span>(roundedRect: rect,</span><br><span class="line">                                byRoundingCorners: .<span class="type">AllCorners</span>,</span><br><span class="line">                                cornerRadii: <span class="type">CGSize</span>(width: <span class="number">3</span>, height: <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">let</span> maskLayer = <span class="type">CAShapeLayer</span>()</span><br><span class="line">    maskLayer.frame = <span class="keyword">self</span>.bounds</span><br><span class="line">    maskLayer.path = maskPath.<span class="type">CGPath</span></span><br><span class="line">    <span class="keyword">self</span>.layer.mask = maskLayer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>不过这是一种错的离谱的写法！</strong></p>
<p>首先，我们应该尽量避免重写 <code>drawRect</code> 方法。不恰当的使用这个方法会导致内存暴增。举个例子，iPhone6 上与屏幕等大的 <code>UIView</code>，即使重写一个空的 <code>drawRect</code> 方法，它也至少占用 <code>750 * 1134 * 4 字节 ≈ 3.4 Mb</code> 的内存。在 <a href="http://bihongbo.com/2016/01/03/memoryGhostdrawRect/" target="_blank" rel="external">内存恶鬼drawRect</a> 及其后续中，作者详细介绍了其中原理，据他测试，在 iPhone6 上空的、与屏幕等大的视图重写 <code>drawRect</code> 方法会消耗 5.2 Mb 内存。总之，能避免重写 <code>drawRect</code> 方法就尽可能避免。</p>
<p>其次，这种方法本质上是用遮罩层 <code>mask</code> 来实现，因此同样无可避免的会导致离屏渲染。我试着将此前 34 个视图的圆角改用这种方法实现，结果 fps 掉到 11 左右。已经属于卡出翔的节奏了。</p>
<p>忘掉这种写法吧，下面介绍正确的高效设置圆角的姿势。</p>
<h2 id="为-UIView-添加圆角"><a href="#为-UIView-添加圆角" class="headerlink" title="为 UIView 添加圆角"></a>为 UIView 添加圆角</h2><p>这种做法的原理是手动画出圆角。虽然我们之前说过，为普通的视图直接设置 <code>cornerRadius</code> 属性即可。但万一不可避免的需要使用 <code>masksToBounds</code>，就可以使用下面这种方法，它的核心代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">kt_drawRectWithRoundedCorner</span><span class="params">(radius radius: CGFloat,</span><br><span class="line">                                  borderWidth: CGFloat,</span><br><span class="line">                                  backgroundColor: UIColor,</span><br><span class="line">                                  borderColor: UIColor)</span></span> -&gt; <span class="type">UIImage</span> &#123;    </span><br><span class="line">    <span class="type">UIGraphicsBeginImageContextWithOptions</span>(sizeToFit, <span class="literal">false</span>, <span class="type">UIScreen</span>.mainScreen().scale)</span><br><span class="line">    <span class="keyword">let</span> context = <span class="type">UIGraphicsGetCurrentContext</span>()</span><br><span class="line"></span><br><span class="line">    <span class="type">CGContextMoveToPoint</span>(context, 开始位置);  <span class="comment">// 开始坐标右边开始</span></span><br><span class="line">    <span class="type">CGContextAddArcToPoint</span>(context, x1, y1, x2, y2, radius);  <span class="comment">// 这种类型的代码重复四次</span></span><br><span class="line"></span><br><span class="line">    <span class="type">CGContextDrawPath</span>(<span class="type">UIGraphicsGetCurrentContext</span>(), .<span class="type">FillStroke</span>)</span><br><span class="line">    <span class="keyword">let</span> output = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="type">UIGraphicsEndImageContext</span>();</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法返回的是 <code>UIImage</code>，也就是说我们利用 Core Graphics 自己画出了一个圆角矩形。除了一些必要的代码外，最核心的就是 <code>CGContextAddArcToPoint</code> 函数。它中间的四个参数表示曲线的起点和终点坐标，最后一个参数表示半径。调用了四次函数后，就可以画出圆角矩形。最后再从当前的绘图上下文中获取图片并返回。</p>
<p>有了这个图片后，我们创建一个 <code>UIImageView</code> 并插入到视图层级的底部：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">kt_addCorner</span><span class="params">(radius radius: CGFloat,</span><br><span class="line">                      borderWidth: CGFloat,</span><br><span class="line">                      backgroundColor: UIColor,</span><br><span class="line">                      borderColor: UIColor)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> imageView = <span class="type">UIImageView</span>(image: kt_drawRectWithRoundedCorner(radius: radius,</span><br><span class="line">                                    borderWidth: borderWidth,</span><br><span class="line">                                    backgroundColor: backgroundColor,</span><br><span class="line">                                    borderColor: borderColor))</span><br><span class="line">        <span class="keyword">self</span>.insertSubview(imageView, atIndex: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整的代码可以在项目中找到，使用时，你只需要这样写：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> view = <span class="type">UIView</span>(frame: <span class="type">CGRectMake</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">view.kt_addCorner(radius: <span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<h2 id="为-UIImageView-添加圆角"><a href="#为-UIImageView-添加圆角" class="headerlink" title="为 UIImageView 添加圆角"></a>为 UIImageView 添加圆角</h2><p>相比于上面一种实现方法，为 <code>UIImageView</code> 添加圆角更为常用。它的实现思路是直接截取图片：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">kt_drawRectWithRoundedCorner</span><span class="params">(radius radius: CGFloat, <span class="number">_</span> sizetoFit: CGSize)</span></span> -&gt; <span class="type">UIImage</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> rect = <span class="type">CGRect</span>(origin: <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: <span class="number">0</span>), size: sizetoFit)</span><br><span class="line"></span><br><span class="line">        <span class="type">UIGraphicsBeginImageContextWithOptions</span>(rect.size, <span class="literal">false</span>, <span class="type">UIScreen</span>.mainScreen().scale)</span><br><span class="line">        <span class="type">CGContextAddPath</span>(<span class="type">UIGraphicsGetCurrentContext</span>(),</span><br><span class="line">            <span class="type">UIBezierPath</span>(roundedRect: rect, byRoundingCorners: <span class="type">UIRectCorner</span>.<span class="type">AllCorners</span>,</span><br><span class="line">                cornerRadii: <span class="type">CGSize</span>(width: radius, height: radius)).<span class="type">CGPath</span>)</span><br><span class="line">        <span class="type">CGContextClip</span>(<span class="type">UIGraphicsGetCurrentContext</span>())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.drawInRect(rect)</span><br><span class="line">        <span class="type">CGContextDrawPath</span>(<span class="type">UIGraphicsGetCurrentContext</span>(), .<span class="type">FillStroke</span>)</span><br><span class="line">        <span class="keyword">let</span> output = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">        <span class="type">UIGraphicsEndImageContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>圆角路径直接用贝塞尔曲线绘制，一个意外的 bonus 是还可以选择哪几个角有圆角效果。这个函数的效果是将原来的 <code>UIImage</code> 剪裁出圆角。配合着这函数，我们可以为 UIImageView 拓展一个设置圆角的方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImageView</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     / !!!只有当 imageView 不为nil 时，调用此方法才有效果</span><br><span class="line"></span><br><span class="line">     :param: radius 圆角半径</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">kt_addCorner</span><span class="params">(radius radius: CGFloat)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.image = <span class="keyword">self</span>.image?.kt_drawRectWithRoundedCorner(radius: radius, <span class="keyword">self</span>.bounds.size)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整的代码可以在项目中找到，使用时，你只需要这样写：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imageView = <span class="keyword">let</span> imgView1 = <span class="type">UIImageView</span>(image: <span class="type">UIImage</span>(name: <span class="string">""</span>))</span><br><span class="line">imageView.kt_addCorner(radius: <span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<h3 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h3><p>无论使用上面哪种方法，你都需要小心使用背景颜色。因为此时我们没有设置 <code>masksToBounds</code>，因此超出圆角的部分依然会被显示。因此，你不应该再使用背景颜色，可以在绘制圆角矩形时设置填充颜色来达到类似效果。</p>
<p>在为 <code>UIImageView</code> 添加圆角时，请确保 <code>image</code> 属性不是 <code>nil</code>，否则这个设置将会无效。</p>
<h1 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h1><p>回到 demo 中，测试一下刚刚定义的这两个设置圆角的方法。首先在 <code>setupContent</code> 方法中把这两行代码的注释取消掉：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">imgView1.kt_addCorner(radius: <span class="number">5</span>)</span><br><span class="line">imgView2.kt_addCorner(radius: <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>然后使用自定义的方法为 label 和 view 设置圆角：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">view.kt_addCorner(radius: <span class="number">6</span>)</span><br><span class="line">label.kt_addCorner(radius: <span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<p>现在，我们不仅成功的添加了圆角效果，同时还保证了性能不受影响：</p>
<p><img src="http://7xti6m.com1.z0.glb.clouddn.com/201601/1464187558065.png" alt="">  </p>
<p>性能测试</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>如果能够只用 <code>cornerRadius</code> 解决问题，就不用优化。</li>
<li>如果必须设置 <code>masksToBounds</code>，可以参考圆角视图的数量，如果数量较少（一页只有几个）也可以考虑不用优化。</li>
<li><code>UIImageView</code> 的圆角通过直接截取图片实现，其它视图的圆角可以通过 Core Graphics 画出圆角矩形实现。</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="http://www.cocoachina.com/ios/20150803/12873.html" target="_blank" rel="external">小心别让圆角成了你列表的帧数杀手</a></li>
<li><a href="http://www.reviewcode.cn/article.html?reviewId=7" target="_blank" rel="external">关于性能的一些问题</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iTerm 2 && Oh My Zsh]]></title>
      <url>http://yoursite.com/blog/2016/05/iTerm-2-Oh-My-Zsh.html</url>
      <content type="html"><![CDATA[<p><strong>转自</strong><a href="http://www.jianshu.com/p/7de00c73a2bb" target="_blank" rel="external">http://www.jianshu.com/p/7de00c73a2bb</a> 作者:SuperDanny</p>
<p>一年前，在搞终端的时候偶然一次机会，让我看到了各种强大的DIY界面，这让我很想去自己搞一个。于是在网上不断的寻找资源，也请教了大多数朋友。最终以失败告终。最近，本人又突然想起当时这件事，于是，决定边做笔记，边尝试当初失败的过程。经过一个晚上的时间，终于DIY出我梦寐以求的效果。</p>
<p><strong>先放上最终DIY效果图：</strong><br><img src="http://7xti6m.com1.z0.glb.clouddn.com/2016-05-24-645592-08177ac961155bb7.png-1.jpeg" alt="645592-08177ac961155bb7.png"></p>
<h3 id="下面，我将分步骤讲解我是怎么一步一步完成DIY过程"><a href="#下面，我将分步骤讲解我是怎么一步一步完成DIY过程" class="headerlink" title="下面，我将分步骤讲解我是怎么一步一步完成DIY过程"></a>下面，我将分步骤讲解我是怎么一步一步完成DIY过程</h3><h3 id="1-首先下载-iTerm-2"><a href="#1-首先下载-iTerm-2" class="headerlink" title="1. 首先下载 iTerm 2"></a>1. 首先下载 <a href="http://www.iterm2.com/" target="_blank" rel="external">iTerm 2</a></h3><h3 id="2-打开iTerm-2"><a href="#2-打开iTerm-2" class="headerlink" title="2. 打开iTerm 2"></a>2. 打开iTerm 2</h3><h3 id="3-输入下面指令安装oh-my-zsh"><a href="#3-输入下面指令安装oh-my-zsh" class="headerlink" title="3. 输入下面指令安装oh-my-zsh"></a>3. 输入下面指令安装<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">oh-my-zsh</a></h3><p><code>curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh</code></p>
<h3 id="4-接下来安装Powerline"><a href="#4-接下来安装Powerline" class="headerlink" title="4. 接下来安装Powerline"></a>4. 接下来安装<a href="http://powerline.readthedocs.org/en/latest/installation.html" target="_blank" rel="external">Powerline</a></h3><p>在官网有教程，我们只需要执行官网第一条安装指令就行</p>
<p>如果你的终端能够正常执行pip指令，那么直接执行下面的指令可以完成安装</p>
<p><code>pip install powerline-status</code></p>
<p>如果没有，则先执行安装pip指令</p>
<p><code>sudo easy_install pip</code></p>
<h3 id="5-下载、安装库字体库"><a href="#5-下载、安装库字体库" class="headerlink" title="5. 下载、安装库字体库"></a>5. 下载、安装库<a href="https://github.com/powerline/fonts" target="_blank" rel="external">字体库</a></h3><p>1）将工程下载下来后cd到<code>install.sh</code>文件所在目录</p>
<p>2）执行指令安装字体库</p>
<p>执行<code>./install.sh</code>指令安装所有Powerline字体</p>
<p>安装完成后提示所有字体均已下载到<code>/Users/superdanny/Library/Fonts</code>路径下</p>
<p>All Powerline fonts installed to /Users/superdanny/Library/Fonts</p>
<h3 id="6-设置iTerm-2的Regular-Font-和-Non-ASCII-Font"><a href="#6-设置iTerm-2的Regular-Font-和-Non-ASCII-Font" class="headerlink" title="6. 设置iTerm 2的Regular Font 和 Non-ASCII Font"></a>6. 设置iTerm 2的Regular Font 和 Non-ASCII Font</h3><p>安装完字体库之后，把iTerm 2的设置里的<code>Profile</code>中的<code>Text</code> 选项卡中里的<code>Regular Font</code>和<code>Non-ASCII Font</code>的字体都设置成 Powerline的字体，我这里设置的字体是12pt Meslo LG S DZ Regular for Powerline</p>
<p><img src="http://7xti6m.com1.z0.glb.clouddn.com/2016-05-24-645592-eafa2148c1755383-2.jpeg" alt="645592-eafa2148"></p>
<h3 id="7-配色方案"><a href="#7-配色方案" class="headerlink" title="7. 配色方案"></a>7. 配色方案</h3><p>1）安装<a href="https://github.com/altercation/solarized" target="_blank" rel="external">配色方案</a></p>
<p>进入刚刚下载的工程的<code>solarized/iterm2-colors-solarized</code> 下双击 <code>Solarized Dark.itermcolors</code> 和 <code>Solarized Light.itermcolors</code> 两个文件就可以把配置文件导入到 iTerm2 里</p>
<p>2）配置配色方案</p>
<p>通过load presets选择刚刚安装的配色主题即可</p>
<p><img src="http://7xti6m.com1.z0.glb.clouddn.com/2016-05-24-645592-00c72100725f2407.jpeg" alt="645592-00c72100725f2407"></p>
<h3 id="8-使用agnoster主题"><a href="#8-使用agnoster主题" class="headerlink" title="8. 使用agnoster主题"></a>8. 使用agnoster主题</h3><p>1）下载<a href="https://github.com/fcamblor/oh-my-zsh-agnoster-fcamblor" target="_blank" rel="external">agnoster</a>主题<br>到下载的工程里面运行install文件,主题将安装到<code>~/.oh-my-zsh/themes</code>目录下</p>
<p>2）设置该主题<br>进入<code>~/.zshrc</code>打开<code>.zshrc</code>文件，然后将<code>ZSH_THEME</code>后面的字段改为<code>agnoster</code>。<code>ZSH_THEME=&quot;agnoster&quot;</code>（agnoster即为要设置的主题）</p>
<h3 id="9-增加指令高亮效果——zsh-syntax-highlighting"><a href="#9-增加指令高亮效果——zsh-syntax-highlighting" class="headerlink" title="9. 增加指令高亮效果——zsh-syntax-highlighting"></a>9. 增加指令高亮效果——<a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="external">zsh-syntax-highlighting</a></h3><p>指令高亮效果作用是当用户输入正确命令时指令会绿色高亮，错误时命令红色高亮</p>
<p>1）cd到<code>.zshrc</code>所在目录</p>
<p>2）执行指令将工程克隆到当前目录</p>
<p><code>git clone git://github.com/zsh-users/zsh-syntax-highlighting.git</code></p>
<p>3）打开<code>.zshrc</code>文件，在最后添加下面内容</p>
<p><code>source XXX/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code></p>
<p>保存文件。</p>
<p>注意：<code>xxx</code>代表<code>.zshrc</code>所在目录</p>
<p>4）<code>cd ~/.oh-my-zsh/custom/plugins</code></p>
<p>5）再次打开<code>.zshrc</code>文件，在最后面添加下面内容</p>
<p><code>plugins=(zsh-syntax-highlighting)</code></p>
<p>保存文件。</p>
<hr>
<h2 id="问题解答区"><a href="#问题解答区" class="headerlink" title="问题解答区"></a>问题解答区</h2><ol>
<li><p>启动iTerm 2 默认使用dash改用zsh解决方法：<br><code>chsh -s /bin/zsh</code></p>
</li>
<li><p>执行指令<code>pip install powerline-status</code>出错解决方法：<br>需要下载苹果官方的<a href="https://developer.apple.com/downloads/index.action?name=for%20Xcode%20" target="_blank" rel="external">Command line</a>。必須官方工具下载最新版 Command Line</p>
</li>
<li>⌘+Q关闭iTerm 2 时每次弹窗提示问题：<br>iTerm 2 中，进入<code>Preference</code>-<code>General</code>-<code>Closing栏目</code>，将<code>Confirm &quot;Quit iTerm2(⌘Q)&quot; command</code>选项勾选去掉就行</li>
<li>找不到.zshrc文件问题：<br>我这里将我的.zshrc文件分享出来。供大家下载<a href="http://pan.baidu.com/s/1sk1LqCt" target="_blank" rel="external">网盘</a></li>
</ol>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac OS X 用终端破解附近 Wifi 密码]]></title>
      <url>http://yoursite.com/blog/2016/03/Mac-OS-X-%E7%94%A8%E7%BB%88%E7%AB%AF%E7%A0%B4%E8%A7%A3%E9%99%84%E8%BF%91-Wifi-%E5%AF%86%E7%A0%81-1.html</url>
      <content type="html"><![CDATA[<p>首先需要确保电脑装有 Xcode 和 MacPorts。Xcode 可以直接从 App Store 免费下载，MacPorts 的下载地址如下：</p>
<p><a href="https://distfiles.macports.org/MacPorts/" target="_blank" rel="external">https://distfiles.macports.org/MacPorts/</a></p>
<p>MacPorts 前称 DarwinPorts，是一个软件包管理系统，用来简化 Mac OS X 系统上软件的安装。它是一个用来简化自由软件/开放源代码软件的安装的自由/开放源代码项目，与Fink和BSD类ports套件的目标和功能类似。它可以让用户在终端中简单的输入 port install 软件包名称来安装软件包，软件的下载、编译、安装以及它依赖的所有其他软件包的安装都会自动完成。</p>
<p>我下载的是「MacPorts-2.2.1-10.9-Mavericks.pkg」这个版本。</p>
<p>安装好 Macport 后，则开始安装Aircrack，打开终端输入命令：</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> <span class="keyword">port</span> install aircrack-ng</span><br></pre></td></tr></table></figure>
<p>等待一段时间安装，然后使用mac系统下自带的 airport 进行附近 wifi 信号的监测。</p>
<p>首先我们将 airport 命令引入到用户命令里，在终端输入：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s <span class="regexp">/System/</span>Library<span class="regexp">/PrivateFrameworks/</span>Apple80211.framework<span class="regexp">/Versions/</span>Current<span class="regexp">/Resources/</span>airport <span class="regexp">/usr/</span>sbin<span class="regexp">/airport</span></span><br></pre></td></tr></table></figure>
<p>el capitan 后只能用<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/System/Library/PrivateFrameworks/Apple80211</span>.framework/Versions/Current/Resources/</span><br></pre></td></tr></table></figure></p>
<p><img src="http://chaishiwei.com/blog/wp-content/uploads/2014/04/201404131-600x296.png" alt="201404131"></p>
<p>SSID 是 wifi名称，RSSI 是信号强度，CHANNEL 是信道。</p>
<p>接着挑选一个信号强的信道进行监听抓包（比如信道1），在终端输入：<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> air<span class="keyword">port</span> en1 sniff  1</span><br></pre></td></tr></table></figure></p>
<p>这时，会提示输入管理员密码，输入时密码是不会显示出来，输入完敲回车就开始监听抓包了。命令中的 en1 是自己电脑的网卡地址，有的电脑可能是 en0，根据自己的实际情况进行输入，查看电脑网卡地址的地方如下：</p>
<p><img src="http://chaishiwei.com/blog/wp-content/uploads/2014/04/QQ20140413-1-600x415.jpg" alt="QQ20140413-1"></p>
<p>大概等待2-5分钟就可以按 command + c 组合键退出查看含有抓包的cap文件了，文件所在地址是/tmp，可以使用Finder的前往文件夹功能进入：</p>
<p><img src="http://chaishiwei.com/blog/wp-content/uploads/2014/04/QQ20140413-2.jpg" alt="QQ20140413-2"></p>
<p>可以将cap文件移到我们想保存的地方，也可以不移走（重启后就没有了）。</p>
<p>接下来就进入关键的破解wifi密码的过程了，先在桌面建一个文件夹，取名「wifi」，将字典和cap文件都放到这个文件夹内（假设字典是01.txt，cap文件名是01.cap，在终端输入：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~/Desktop/wifi</span><br><span class="line">aircrack-ng -w 01.txt 01.<span class="keyword">cap</span></span><br></pre></td></tr></table></figure>
<p><img src="http://chaishiwei.com/blog/wp-content/uploads/2014/04/201404132-600x464.png" alt="201404132"></p>
<p>就可以看到cap文件内的抓包情况，Encryption中（0 handshake）是抓包失败，（1 handshake）则是抓包成功。图中看到第11行抓包成功，则在「Index number of target network ?」这里输入11后敲回车：</p>
<p><img src="http://chaishiwei.com/blog/wp-content/uploads/2014/04/201404133.png" alt="201404133"></p>
<p>如果cap文件内全是（0 handshake），就按 command + c 组合键退出。重新回到「sudo airport en1 sniff 1」这步进行监听抓包。抓包成功率受到 wifi 信号强弱、电脑与路由器距离远近、路由器是否正处在收发数据状态的影响。总之多试几次、监听时间适当延长些，可以大大提高成功率。</p>
<p>进入到破解过程界面，如图：</p>
<p><img src="http://chaishiwei.com/blog/wp-content/uploads/2014/04/201404134.png" alt="201404134"></p>
<p>接下来等待破解结果就行了，中断破解过程可以直接按 command + c 组合键退出。破解过程所需时间长短受电脑硬件配置、字典体积大小的影响。如果01.txt字典破解失败，则可以换其它字典进行破解，直到破解成功。</p>
<p>使用一个好的字典是很重要的，一个9位的纯数字字典大概1G多，结果经过几个小时的破解，如果密码是987654321就很令人郁闷了，所以最好准备几个常用的wifi密码字典，可以大大提高成功率和节省时间。常用字典可以直接百度Google搜索下载。</p>
<p>我在测试这个暴力破解方法时并没成功过，估计是附近的wifi密码都太冷门，导致我准备的几个字典都没对应上。如果破解成功则会如下图所示：</p>
<p><img src="http://chaishiwei.com/blog/wp-content/uploads/2014/04/QQ20140413-12-600x345.jpg" alt="QQ20140413-12"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo备份与搭建]]></title>
      <url>http://yoursite.com/blog/2016/03/HexoBackup.html</url>
      <content type="html"><![CDATA[<p>#<a href="http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html#more" target="_blank" rel="external">Hexo搭建</a></p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> hexo  #创建一个文件夹</span><br><span class="line"><span class="keyword">cd</span> hexo</span><br><span class="line">npm install -<span class="keyword">g</span> hexo-<span class="keyword">cli</span></span><br><span class="line">npm install hexo --<span class="keyword">save</span></span><br></pre></td></tr></table></figure>
<p>部署Hexo：在Git shell 中输入<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> init</span><br></pre></td></tr></table></figure></p>
<p>安装Hexo 插件：自动生成sitemap,Rss，部署到git等，建议安装<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">archive</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">category</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-tag <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-heroku <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-rsync <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-openshift <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-marked@<span class="number">0.2</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-stylus@<span class="number">0.2</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-feed@<span class="number">1</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap@<span class="number">1</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="Git获取SSHKey"><a href="#Git获取SSHKey" class="headerlink" title="Git获取SSHKey"></a>Git获取SSHKey</h2><ol>
<li>打开 Git Bash.</li>
<li>Paste the text below, substituting in your GitHub email address.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br><span class="line">or</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>3.回车3次</p>
<p>4.在Git Bash 输入<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github<span class="selector-class">.com</span></span><br><span class="line">ssh -T git@git<span class="selector-class">.coding</span><span class="selector-class">.net</span></span><br></pre></td></tr></table></figure></p>
<p>测试是否生效</p>
<p>5.如下提示说明成功<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi username! </span><br><span class="line">You've successfully authenticated, <span class="keyword">but</span> GitHub <span class="keyword">does</span> <span class="keyword">not</span> provide shell access.</span><br></pre></td></tr></table></figure></p>
<hr>
<h2 id="Git-backup"><a href="#Git-backup" class="headerlink" title="Git-backup"></a><a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="external">Git-backup</a></h2><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>if version is 3.x.x, you should install as follow:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure>
<h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p>if you install with –save, you must remove firstly when you update it.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm remove hexo-git-backup</span><br><span class="line">$ npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure>
<h2 id="Configure"><a href="#Configure" class="headerlink" title="Configure"></a>Configure</h2><p>You should configure this plugin in <code>_config.yml</code>.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">backup:</span></span><br><span class="line"><span class="attr">    type:</span> git</span><br><span class="line"><span class="attr">    repository:</span></span><br><span class="line"><span class="attr">       github:</span> git@github.com:xxx/xxx.git,branchName</span><br><span class="line"><span class="attr">       gitcafe:</span> git@github.com:xxx/xxx.git,branchName</span><br></pre></td></tr></table></figure>
<h2 id="Using"><a href="#Using" class="headerlink" title="Using"></a>Using</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> backup</span><br></pre></td></tr></table></figure>
<p>or<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> b</span><br></pre></td></tr></table></figure></p>
<h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p>if you want to back up with your theme,just add <code>theme: your theme name,your theme name</code> in <code>_config.yml</code>.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">backup:</span></span><br><span class="line"><span class="attr">    type:</span> git</span><br><span class="line"><span class="attr">    theme:</span> coney,landscape,xxx</span><br><span class="line"><span class="attr">    repository:</span></span><br><span class="line"><span class="attr">       github:</span> git@github.com:xxx/xxx.git,branchName</span><br><span class="line"><span class="attr">       gitcafe:</span> git@github.com:xxx/xxx.git,branchName</span><br></pre></td></tr></table></figure>
<p><strong>Attention: if you do as above, the dir <code>themes/coney/.git</code>will be removed</strong></p>
<p>if you want DIY commit message, just add ‘message: update xxx’.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">backup:</span></span><br><span class="line"><span class="attr">    type:</span> git</span><br><span class="line"><span class="attr">    message:</span> update xxx</span><br><span class="line"><span class="attr">    repository:</span></span><br><span class="line"><span class="attr">       github:</span> git@github.com:xxx/xxx.git,branchName</span><br><span class="line"><span class="attr">       gitcafe:</span> git@github.com:xxx/xxx.git,branchName</span><br></pre></td></tr></table></figure></p>
<p>Now you can backup all the blog!</p>
<h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><p>You may get some troubles by your computer’ permission。</p>
<p>###Error: EISDIR, open<br>it is caused by permission.<br>just do ‘sudo hexo b’<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> hexo b</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo Windows安装]]></title>
      <url>http://yoursite.com/blog/2016/03/Hexo%20Windows%E5%AE%89%E8%A3%85.html</url>
      <content type="html"><![CDATA[<h1 id="本地安装hexo步骤"><a href="#本地安装hexo步骤" class="headerlink" title="本地安装hexo步骤"></a>本地安装hexo步骤</h1><p>注意：本节教程只针对Windows用户，Linux和Mac用户请移步hexo安装。</p>
<ul>
<li><p>安装Git</p>
<blockquote>
<p>下载 msysgit 并执行即可完成安装。</p>
</blockquote>
</li>
<li><p>安装Node.js</p>
<blockquote>
<p>在 Windows 环境下安装 Node.js 非常简单，仅须下载安装文件并执行即可完成安装。</p>
</blockquote>
</li>
<li><p>安装hexo</p>
<blockquote>
<p>利用 npm 命令即可安装。（在任意位置点击鼠标右键，选择Git bash）<br>npm install -g hexo<br>安装完成后，在你喜爱的文件夹下（如H:\hexo），执行以下指令(在H:\hexo内点击鼠标右键，选择Git bash)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。创建hexo文件夹<br>hexo init<br>安装依赖包<br>本地查看</p>
</blockquote>
</li>
</ul>
<p>现在我们已经搭建起本地的hexo博客了，执行以下命令(在H:\hexo)，然后到浏览器输入localhost:4000看看。<br>hexo generate<br>hexo server<br>好了，至此，本地博客已经搭建起来了，只是本地哦，别人看不到的。下面，我们要部署到Github。</p>
<h1 id="提交hexo到github步骤"><a href="#提交hexo到github步骤" class="headerlink" title="提交hexo到github步骤"></a>提交hexo到github步骤</h1><ul>
<li><p>注册Github账号</p>
<blockquote>
<p>已有账号可以跳过，没有的，请在此进行注册，很简单，这里就不介绍了。</p>
</blockquote>
</li>
<li><p>创建repository</p>
<blockquote>
<p>在自己Github主页右下角，创建一个新的repository。比如我的Github账号是imsofter，那么我应该创建的repository名字应该是imsofter.github.io。</p>
</blockquote>
</li>
<li><p>部署</p>
<blockquote>
<p>编辑_config.yml(在H:\hexo下)。你在部署时，要把下面的zippera都换成你的账号名。<br>deploy:<br>type: github<br>repository: <span class="Apple-converted-space"></span> <a href="https://github.com/imsofter/imsofter.github.io.git" target="_blank" rel="external">https://github.com/imsofter/imsofter.github.io.git</a><br>branch: master<br>执行下列指令即可完成部署。据说最新版本的hexo 中，这里的 type 要写成 git，而不是 github。<br>hexo generate<br>hexo deploy<br>记住：每次修改本地文件后，需要hexo generate才能保存。每次使用命令时，都要在H:\hexo目录下。注意：有些新用户需要设置 ssh，否则上述命令会失败。ssh 的介绍和设置方法请看官方教程，不用担心，很简单。<br>Okay,我们的博客已经完全搭建起来了，在浏览器访问zippera.github.io就能看到你的成就了！</p>
</blockquote>
</li>
</ul>
<h1 id="以下为安装出问题的总结"><a href="#以下为安装出问题的总结" class="headerlink" title="以下为安装出问题的总结"></a>以下为安装出问题的总结</h1><h2 id="安装hexo后，bash-hexo-command-not-found"><a href="#安装hexo后，bash-hexo-command-not-found" class="headerlink" title="安装hexo后，bash: hexo: command not found"></a>安装hexo后，bash: hexo: command not found</h2><p>找到C:\Users\Administrator\AppData\Roaming\npm\node_modules\hexo\bin\，将此目录添加到环境变量中</p>
<h2 id="执行-hexo-deploy-后-出现-error-deployer-not-found-github-的错误"><a href="#执行-hexo-deploy-后-出现-error-deployer-not-found-github-的错误" class="headerlink" title="执行 hexo deploy 后,出现 error deployer not found:github 的错误"></a>执行 hexo deploy 后,出现 error deployer not found:github 的错误</h2><p>hexo 更新到3.0之后，deploy的type 的github需要改成git<br>repository路径: <span class="Apple-converted-space"></span> <a href="http://github.com/imsofter/imsofter.github.io.git" target="_blank" rel="external">http://github.com/imsofter/imsofter.github.io.git</a> <span class="Apple-converted-space"></span> （需要将https修改成http）还不行的话尝试<br>git@github.com:imsofter/imsofter.github.io.git路径<br>改了之后执行npm install hexo-deployer-git –save 安装hexo对于git的部署工具。</p>
<p>然后再部署试试</p>
<h2 id="验证报错报错verification-failed："><a href="#验证报错报错verification-failed：" class="headerlink" title="验证报错报错verification failed："></a>验证报错报错verification failed：</h2><p>Error: Host key verification failed.<br>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights and the repository exists.</p>
<p>解决方法：条件SSHkey<br>$ ssh-keygen -t rsa -C “imsofter@163.com”<br>三次回车，即可设置密码为空</p>
<p>将生成的C:\Users\Administrator.ssh目录下的id_rsa.pub添加到github上<br><img src="http://images2015.cnblogs.com/blog/577880/201602/577880-20160229183347876-960342404.png" alt=""></p>
<p>再测试是否可以连接到github上，<br>$ ssh git@github.com<br>Hi imsofter! You’ve successfully authenticated, but GitHub does not provide shell access.<br>Connection to github.com closed.</p>
<p>再可以将代码推上github上了。</p>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>在source目录下创建CNAME文件<br>DNS设置<br>用DNSpod，快，免费，稳定。<br>注册DNSpod，添加域名，如下图设置。<br><img src="http://pic.yupoo.com/vankos_v/DKgbA7WH/wLVyM.png" alt=""><br>其中A的两条记录指向的ip地址是github Pages的提供的ip<br>192.30.252.153<br>192.30.252.154</p>
]]></content>
    </entry>
    
  
  
</search>
